# // Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Description: ADF CloudFormation Template - Global Base - Cross Account Roles to Allow Access to CodePipeline in Deployment Account
Parameters:
  KMSArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: ARN of the KMS CMK created in the Deployment account
    Default: kms_arn
  DeploymentAccountId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: Deployment Account ID
    Default: deployment_account_id
Resources:
  CodeCommitRole:
    # This role is used to connect the Pipeline in the deployment account to CodeCommit in
    # In the source account. If you are not using CodeCommit or are using it only for a specific
    # OU you can target this more specifically and remove it from the global.yml
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-codecommit-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref DeploymentAccountId
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  CodeCommitPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-codecommit-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codecommit:BatchGetRepositories"
              - "codecommit:CancelUploadArchive"
              - "codecommit:Get*"
              - "codecommit:GitPull"
              - "codecommit:List*"
              - "codecommit:UploadArchive"
              - "codepipeline:StartPipelineExecution"
              - "events:PutEvents"
              - "s3:Get*"
              - "s3:List*"
              - "s3:Put*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kms:Decrypt"
              - "kms:Describe*"
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:Get*"
              - "kms:List*"
              - "kms:ReEncrypt*"
            Resource: !Ref KMSArn
      Roles:
        - !Ref CodeCommitRole
  CloudFormationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-cloudformation-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "CloudFormation"
            Action:
              - cloudformation:*
              - codedeploy:*
              - iam:PassRole
              - s3:Get*
              - s3:List*
              - s3:Put*
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Sid: "KMS"
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !Ref KMSArn
      Roles:
        - !Ref CloudFormationRole
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-cloudformation-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref DeploymentAccountId # Deployment Account Number
            Action:
              - sts:AssumeRole
      Path: /
  CloudFormationDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-cloudformation-deployment-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "CloudFormation"
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Sid: "AssumeRole"
            Principal:
              AWS:
                - !Ref DeploymentAccountId # Deployment Account Number
            Action:
              - sts:AssumeRole
      Path: /
  CloudFormationDeploymentPolicy:
    # This is the role that will be used to deploy CloudFormation resources from
    # within the account that it is deployed to. You should scope this policy depending
    # On what you would like to deploy within certain Organizational Units.
    # NOTE: below is a default IAM policy and these should be changed to suit your needs.
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-cloudformation-deployment-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "CloudFormation"
            Action:
              - "apigateway:*"
              - "application-autoscaling:*"
              - "autoscaling:*"
              - "cloudformation:*"
              - "cloudtrail:*"
              - "cloudwatch:*"
              - "codebuild:*"
              - "codecommit:*"
              - "codedeploy:*"
              - "codepipeline:*"
              - "cognito-identity:*"
              - "cognito-idp:*"
              - "config:*"
              - "dax:*"
              - "dynamodb:*"
              - "ec2:*"
              - "ecr:*"
              - "ecs:*"
              - "elasticbeanstalk:*"
              - "elasticloadbalancing:*"
              - "es:*"
              - "events:*"
              - "guardduty:*"
              - "iam:*"
              - "kinesis:*"
              - "kms:Create*"
              - "kms:Decrypt"
              - "kms:Describe*"
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:Get*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:ReEncrypt*"
              - "lambda:*"
              - "logs:*"
              - "opsworks:*"
              - "route53:*"
              - "s3:*"
              - "servicecatalog:AcceptPortfolioShare"
              - "servicecatalog:AssociateProductWithPortfolio"
              - "servicecatalog:AssociatePrincipalWithPortfolio"
              - "servicecatalog:AssociateTagOptionWithResource"
              - "servicecatalog:Create*"
              - "servicecatalog:Delete*"
              - "servicecatalog:Describe*"
              - "servicecatalog:ListProvisioningArtifacts"
              - "servicecatalog:UpdateProduct"
              - "sns:*"
              - "sqs:*"
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "states:*"
              - "tag:*"
              - "xray:*"
            Resource:
              - "*"
          - Effect: Allow
            Sid: "KMS"
            Action:
              - "kms:Decrypt"
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:ReEncrypt*"
            Resource: !Ref KMSArn
      Roles:
        - !Ref CloudFormationDeploymentRole

  ## Backup IAM Service Role
  BackupRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: aws-controltower-SMSBASELINE-BackupRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "backup.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"

# Config Rules - currently only work in regions supported by Control Tower
# since they depend on a working AWS Config base setup (recorder)

  AWSConfigRuleEnforceTags1:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: SMSBASELINE-EnforceTags1
      InputParameters:
        tag1Key: Name
        tag2Key: CostCenter
        tag3Key: Terminate
        tag4Key: Monitoring
        tag5Key: Scheduled
        tag6Key: Owner
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS

  # Currently only up to six tags are allowed in REQUIRED_TAGS rule so split it up
  AWSConfigRuleEnforceTags2:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: SMSBASELINE-EnforceTags2
      InputParameters:
        tag1Key: BillingContact
        tag2Key: SMSBASELINE-Backup
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS

# Copied from regional.yml because of https://github.com/awslabs/aws-deployment-framework/issues/96
# This has to be kept in sync with regional.yml

  BackupVault:
    Type: "AWS::Backup::BackupVault"
    Properties:
      BackupVaultName: "SMSBASELINE-BackupVault"

  BackupPlan:
    Type: "AWS::Backup::BackupPlan"
    Properties:
      BackupPlan:
        BackupPlanName: "SMSBASELINE-BackupVault"
        BackupPlanRule:
          - RuleName: "SMSBASELINE-RuleForDailyBackups"
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: "cron(0 5 ? * * *)"

  BackupSelection:
    Type: "AWS::Backup::BackupSelection"
    Properties:
      BackupSelection:
        SelectionName: SMSBASELINE-BackupSelection
        IamRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-controltower-SMSBASELINE-BackupRole"
        ListOfTags:
          - ConditionType: "STRINGEQUALS"
            ConditionKey: "SMSBASELINE-Backup"
            ConditionValue: "daily"
      BackupPlanId: !Ref BackupPlan

  # Remove Default VPC
  ExpungeDefaultVPCFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import base64
          import json
          import logging
          import string
          import boto3
          from botocore.vendored import requests
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def lambda_handler(event, context):

            if event['RequestType'] != 'Create':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return

            ec2 = boto3.client('ec2')
            response = ec2.describe_vpcs(
              Filters=[
                {
                  'Name': 'isDefault',
                  'Values': [
                      'true',
                  ]
                },
              ],
            )

            if not response.get('Vpcs'):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              logger.info('no default vpc to delete')
              return

            vpc_id = response.get('Vpcs')[0]['VpcId']

            # describe subnets
            resp_desc_snet = ec2.describe_subnets(
              Filters=[
                {
                  'Name': 'vpc-id',
                  'Values': [
                    vpc_id,
                  ]
                },
              ],
            )

            # delete every subnet
            for item in resp_desc_snet.get('Subnets'):
                ec2.delete_subnet(SubnetId=item.get('SubnetId'))

            # describe internet gateway
            resp_desc_igw = ec2.describe_internet_gateways(
              Filters=[
                  {
                      'Name': 'attachment.vpc-id',
                      'Values': [
                          vpc_id,
                      ]
                  },
              ],
            )
            for item in resp_desc_igw.get('InternetGateways'):
                # Detach the IGW
                ec2.detach_internet_gateway(InternetGatewayId=item.get('InternetGatewayId'), VpcId=vpc_id)
                # Delete the IGW
                ec2.delete_internet_gateway(InternetGatewayId=item.get('InternetGatewayId'))

            ec2.delete_vpc(VpcId=vpc_id)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

      FunctionName: aws-controltower-SMSBASELINE-ExpungeDefaultVPC
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt ExpungeDefaultVPCRole.Arn
      Runtime: python3.7

  ExpungeDefaultVPCRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "aws-controltower-SMSBASELINE-ExpungeDefaultVPCRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess

  ExpungeDefaultVPC:
    Type: Custom::ExpungeDefaultVPC
    Properties:
      ServiceToken: !GetAtt ExpungeDefaultVPCFunction.Arn